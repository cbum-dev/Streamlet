
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://321priyanshu321_db_user:github@cluster0.zh61jsa.mongodb.net/streamlet?retryWrites=true&w=majority"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Streaming related fields
  streamTitle   String?
  streamDescription String?
  isLive        Boolean   @default(false)
  totalStreams  Int       @default(0)
  totalViewers  Int       @default(0)
  
  accounts      Account[]
  sessions      Session[]
  streamKeys    StreamKey[]
  streams       Stream[]
  analytics     StreamAnalytics[]
  recordings    Recording[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StreamKey {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // User-friendly name for the key
  platform    String   // youtube, twitch, facebook, custom
  encryptedKey String  // Encrypted stream key
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastUsed    DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  streams     Stream[]
}

model Stream {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  platform      String
  quality       String   @default("medium")
  status        String   @default("created") // created, live, ended, error
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Stream metrics
  peakViewers   Int      @default(0)
  totalViewers  Int      @default(0)
  duration      Int      @default(0) // in seconds
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
  streamKey     StreamKey @relation(fields: [streamKeyId], references: [id])
  streamKeyId   String   @db.ObjectId
  analytics     StreamAnalytics[]
  recording     Recording?
}

model StreamAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp     DateTime @default(now())
  viewers       Int      @default(0)
  bitrate       Float?
  fps           Float?
  resolution    String?
  
  stream        Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId      String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}

model Recording {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  filename      String
  fileSize      Int      
  duration      Int      
  quality       String
  format        String   @default("mp4")
  thumbnailUrl  String?
  downloadUrl   String?
  isProcessed   Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  stream        Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId      String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}